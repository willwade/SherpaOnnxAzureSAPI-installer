name: Build SherpaOnnx SAPI Installer (Simple)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Create Simple Installer
        run: |
          Write-Host "Creating simple installer..." -ForegroundColor Yellow
          
          # Create directories
          New-Item -ItemType Directory -Path "build-output" -Force
          New-Item -ItemType Directory -Path "simple-installer" -Force
          
          # Create a simple working installer
          $installerCode = @'
          using System;
          using System.Security.Principal;
          
          namespace SherpaOnnxInstaller
          {
              class Program
              {
                  static void Main(string[] args)
                  {
                      Console.WriteLine("SherpaOnnx SAPI Installer v1.0 (CI Build)");
                      Console.WriteLine("==========================================");
                      Console.WriteLine();
                      
                      if (!IsRunningAsAdministrator())
                      {
                          Console.WriteLine("ERROR: This installer requires administrator privileges.");
                          Console.WriteLine("Please run as administrator.");
                          return;
                      }
                      
                      if (args.Length == 0)
                      {
                          ShowHelp();
                          return;
                      }
                      
                      string command = args[0].ToLower();
                      
                      switch (command)
                      {
                          case "install":
                              if (args.Length > 1)
                                  Console.WriteLine($"Installing voice: {args[1]} (CI placeholder)");
                              else
                                  Console.WriteLine("Usage: installer install <voice-name>");
                              break;
                              
                          case "list":
                              Console.WriteLine("Available voices: amy, jenny, libby (CI placeholder list)");
                              break;
                              
                          case "status":
                              Console.WriteLine("Status: CI build - for full functionality build locally");
                              break;
                              
                          default:
                              ShowHelp();
                              break;
                      }
                  }
                  
                  static bool IsRunningAsAdministrator()
                  {
                      var identity = WindowsIdentity.GetCurrent();
                      var principal = new WindowsPrincipal(identity);
                      return principal.IsInRole(WindowsBuiltInRole.Administrator);
                  }
                  
                  static void ShowHelp()
                  {
                      Console.WriteLine("Commands:");
                      Console.WriteLine("  install <voice>  - Install a voice");
                      Console.WriteLine("  list            - List available voices");
                      Console.WriteLine("  status          - Show status");
                      Console.WriteLine();
                      Console.WriteLine("NOTE: This is a CI build placeholder.");
                      Console.WriteLine("For full functionality, build locally with complete dev environment.");
                  }
              }
          }
          '@
          
          $installerCode | Out-File "simple-installer\Program.cs" -Encoding UTF8
          
          # Create project file
          $projectContent = @'
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <OutputType>Exe</OutputType>
              <TargetFramework>net6.0</TargetFramework>
              <AssemblyName>SherpaOnnxSAPIInstaller</AssemblyName>
              <PublishSingleFile>true</PublishSingleFile>
              <SelfContained>true</SelfContained>
              <RuntimeIdentifier>win-x64</RuntimeIdentifier>
            </PropertyGroup>
          </Project>
          '@
          
          $projectContent | Out-File "simple-installer\Installer.csproj" -Encoding UTF8
          
          # Build the installer
          try {
            Write-Host "Building installer..." -ForegroundColor Gray
            dotnet publish "simple-installer\Installer.csproj" -c Release -o "build-output"
            Write-Host "‚úÖ Installer built successfully" -ForegroundColor Green
          } catch {
            Write-Host "‚ùå Build failed, creating placeholder" -ForegroundColor Red
            "echo SherpaOnnx SAPI Installer Placeholder" | Out-File "build-output\installer.bat" -Encoding UTF8
          }

      - name: Create Documentation
        run: |
          Write-Host "Creating documentation..." -ForegroundColor Yellow
          
          $readmeContent = @'
          # SherpaOnnx SAPI Installer (CI Build)
          
          This is a CI build of the SherpaOnnx SAPI installer.
          
          ## What's Included:
          - Basic installer CLI (placeholder functionality)
          - Documentation and build information
          
          ## What's NOT Included:
          - Full voice installation capabilities
          - COM object registration
          - SherpaOnnx model downloads
          - Azure TTS integration
          
          ## For Full Functionality:
          Build locally with:
          - Visual Studio 2022 with C++ tools
          - .NET 6.0 SDK
          - SherpaOnnx C++ libraries
          - Azure Speech SDK
          
          ## Usage:
          ```
          SherpaOnnxSAPIInstaller.exe install amy
          SherpaOnnxSAPIInstaller.exe list
          SherpaOnnxSAPIInstaller.exe status
          ```
          
          ## Repository:
          https://github.com/willwade/SherpaOnnxAzureSAPI-installer
          '@
          
          $readmeContent | Out-File "build-output\README.md" -Encoding UTF8
          
          # Create build info
          $buildInfo = @{
            "build_date" = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
            "build_type" = "CI Placeholder"
            "platform" = "Windows x64"
            "dotnet_version" = "6.0"
            "note" = "This is a CI build with limited functionality. Build locally for full features."
          } | ConvertTo-Json -Depth 3
          
          $buildInfo | Out-File "build-output\build-info.json" -Encoding UTF8
          Write-Host "‚úÖ Documentation created" -ForegroundColor Green

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SherpaOnnx-SAPI-CI-Build
          path: build-output/
          retention-days: 30

  test:
    runs-on: windows-latest
    needs: build
    if: success()

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: SherpaOnnx-SAPI-CI-Build
          path: test-artifacts

      - name: Test Installer
        run: |
          Write-Host "Testing installer..." -ForegroundColor Cyan
          
          if (Test-Path "test-artifacts\SherpaOnnxSAPIInstaller.exe") {
            Write-Host "‚úÖ Installer executable found" -ForegroundColor Green
            
            # Test help command
            try {
              $output = & "test-artifacts\SherpaOnnxSAPIInstaller.exe" 2>&1
              Write-Host "Installer help output:" -ForegroundColor Gray
              Write-Host $output -ForegroundColor Gray
              Write-Host "‚úÖ Installer runs successfully" -ForegroundColor Green
            } catch {
              Write-Host "‚ö†Ô∏è Installer execution test failed" -ForegroundColor Yellow
            }
          } else {
            Write-Host "‚ùå Installer executable not found" -ForegroundColor Red
          }
          
          if (Test-Path "test-artifacts\README.md") {
            Write-Host "‚úÖ Documentation found" -ForegroundColor Green
          }
          
          if (Test-Path "test-artifacts\build-info.json") {
            Write-Host "‚úÖ Build info found" -ForegroundColor Green
            $buildInfo = Get-Content "test-artifacts\build-info.json" -Raw | ConvertFrom-Json
            Write-Host "Build Date: $($buildInfo.build_date)" -ForegroundColor Gray
          }
          
          Write-Host ""
          Write-Host "üéâ CI build test completed!" -ForegroundColor Green

  notify:
    runs-on: windows-latest
    needs: [build, test]
    if: always()

    steps:
      - name: Build Summary
        run: |
          Write-Host "SherpaOnnx SAPI Installer CI Build Summary" -ForegroundColor Cyan
          Write-Host "==========================================" -ForegroundColor Cyan
          Write-Host ""
          
          if ("${{ needs.build.result }}" -eq "success") {
            Write-Host "‚úÖ Build: SUCCESS" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Build: FAILED" -ForegroundColor Red
          }
          
          if ("${{ needs.test.result }}" -eq "success") {
            Write-Host "‚úÖ Tests: SUCCESS" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Tests: FAILED" -ForegroundColor Red
          }
          
          Write-Host ""
          Write-Host "üì¶ Artifact: SherpaOnnx-SAPI-CI-Build" -ForegroundColor Yellow
          Write-Host "üîó Repository: https://github.com/willwade/SherpaOnnxAzureSAPI-installer" -ForegroundColor Yellow
