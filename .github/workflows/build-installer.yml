name: Build OpenSpeechSAPI Installer

on:
  push:
    branches: [ main, config-based-sapi-voices ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # No longer need submodules since AACSpeakHelper is integrated

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        pip install pyinstaller
        uv sync
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: latest
    
    - name: Setup NSIS
      run: |
        Invoke-WebRequest -Uri "https://downloads.sourceforge.net/project/nsis/NSIS%203/3.09/nsis-3.09-setup.exe" -OutFile "nsis-setup.exe"
        Start-Process -FilePath "nsis-setup.exe" -ArgumentList "/S" -Wait
        echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Build C++ COM Wrapper
      run: |
        cd NativeTTSWrapper
        msbuild NativeTTSWrapper.vcxproj /p:Configuration=Release /p:Platform=x64 /t:Clean
        msbuild NativeTTSWrapper.vcxproj /p:Configuration=Release /p:Platform=x64
        cd ..
    
    - name: Build Python Installer
      run: |
        uv run pyinstaller --onefile --console --name sapi_voice_installer sapi_voice_installer.py
    
    - name: Build AACSpeakHelper Server
      run: |
        uv run pyinstaller --onefile --console --name AACSpeakHelperServer AACSpeakHelperServer.py
    
    - name: Create NSIS Installer
      run: |
        makensis installer.nsi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: OpenSpeechSAPI-installer-${{ github.sha }}
        path: |
          OpenSpeechSAPI-installer.exe
          dist/sapi_voice_installer.exe
          AACSpeakHelper/dist/AACSpeakHelperServer.exe
          NativeTTSWrapper/x64/Release/NativeTTSWrapper.dll
          NativeTTSWrapper/x64/Release/*.dll

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          OpenSpeechSAPI-installer.exe
          dist/sapi_voice_installer.exe
          dist/AACSpeakHelperServer.exe
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-installer:
    needs: build-windows
    runs-on: windows-latest
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: OpenSpeechSAPI-installer-${{ github.sha }}
    
    - name: Test installer (dry run)
      run: |
        # Test that executables were created
        if (Test-Path "dist/sapi_voice_installer.exe") {
          Write-Host "‚úÖ sapi_voice_installer.exe created"
        } else {
          Write-Host "‚ùå sapi_voice_installer.exe missing"
          exit 1
        }

        if (Test-Path "dist/AACSpeakHelperServer.exe") {
          Write-Host "‚úÖ AACSpeakHelperServer.exe created"
        } else {
          Write-Host "‚ùå AACSpeakHelperServer.exe missing"
          exit 1
        }

        if (Test-Path "NativeTTSWrapper/x64/Release/NativeTTSWrapper.dll") {
          Write-Host "‚úÖ NativeTTSWrapper.dll created"
        } else {
          Write-Host "‚ùå NativeTTSWrapper.dll missing"
          exit 1
        }

        if (Test-Path "SherpaOnnxAzureSAPI-installer.exe") {
          Write-Host "‚úÖ NSIS installer created"
        } else {
          Write-Host "‚ùå NSIS installer missing"
          exit 1
        }

        Write-Host "üéâ All build artifacts present!"

    - name: Test COM registration (unattended mode)
      run: |
        # Test that the Python installer handles COM registration gracefully in CI
        Write-Host "Testing COM registration in unattended mode..."
        $env:CI = "true"
        $result = & "dist/sapi_voice_installer.exe" register-com
        $exitCode = $LASTEXITCODE

        # In CI mode, COM registration is expected to fail but should handle it gracefully
        if ($exitCode -eq 1) {
          Write-Host "‚úÖ COM registration failed gracefully in CI mode (expected)"
        } else {
          Write-Host "‚ö†Ô∏è Unexpected exit code: $exitCode"
        }

        # Test unregister as well
        Write-Host "Testing COM unregistration in unattended mode..."
        $result = & "dist/sapi_voice_installer.exe" unregister-com
        $exitCode = $LASTEXITCODE

        if ($exitCode -eq 0) {
          Write-Host "‚úÖ COM unregistration completed successfully in CI mode"
        } else {
          Write-Host "‚ö†Ô∏è COM unregistration exit code: $exitCode"
        }

        Write-Host "‚úÖ COM registration tests completed"
